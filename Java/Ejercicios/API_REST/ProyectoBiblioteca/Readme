
# üìö API REST - Gesti√≥n de Biblioteca

Proyecto desarrollado con **Java** y **Spring Boot** que implementa una API REST para la gesti√≥n b√°sica de una biblioteca. Permite realizar operaciones CRUD sobre libros almacenados en una base de datos relacional.

## üß© Funcionalidades principales

- Crear un nuevo libro (`POST /libros`)
- Consultar todos los libros (`GET /libros`)
- Consultar libro por ID (`GET /libros/{id}`)
- Actualizar libro existente (`PUT /libros/{id}`)
- Eliminar libro (`DELETE /libros/{id}`)

## üõ†Ô∏è Tecnolog√≠as utilizadas

- **Java 17**
- **Spring Boot**
- **Spring Data JPA**
- **MySQL** (o base embebida para pruebas)
- **Postman** (para testing de endpoints)
- **Maven** (gesti√≥n de dependencias)

---

## üß± Estructura del proyecto

- `Libro` ‚Üí Clase entidad principal
- `LibroRepository` ‚Üí Repositorio JPA para persistencia
- `LibroService` ‚Üí L√≥gica de negocio
- `LibroController` ‚Üí Rutas REST y manejo de solicitudes HTTP

## ‚ñ∂Ô∏è C√≥mo ejecutar el proyecto

1. Clon√° el repositorio:
   ```bash
   git clone https://github.com/RoDavid4/Ejercicios-code-your-future.git
````

2. Naveg√° a la carpeta del proyecto:

   ```bash
   cd Java/Ejercicios/API_REST/ProyectoBiblioteca
   ```

3. Asegurate de tener una base de datos corriendo (MySQL, H2, etc.). Configur√° los datos de conexi√≥n en `application.properties`.

4. Ejecut√° la aplicaci√≥n:

   ```bash
   mvn spring-boot:run
   ```

5. Prob√° los endpoints desde Postman o navegador en:

   ```
   http://localhost:8080/libros
   ```

## üß™ Ejemplo de JSON para crear un libro

```json
{
  "titulo": "Cien a√±os de soledad",
  "autor": "Gabriel Garc√≠a M√°rquez",
  "anioPublicacion": 1967
}
```

## üë®‚Äçüíª Autor

David Rodr√≠guez
[LinkedIn](https://www.linkedin.com/in/david-rodr%C3%ADguez-530327222/) | [GitHub](https://github.com/RoDavid4)
