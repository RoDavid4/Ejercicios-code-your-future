USE mi_bd;
/*
            ##############################################
            # Ejercicios Prácticos con Tablas Temporales #
            ##############################################
*/

/* Utiliza TABLE para consultar la tabla productos de manera simple, 
    ordenando los productos de forma descendente por precio y solo 10 filas. */
TABLE productos
ORDER BY precio DESC
LIMIT 10;

/* Crea una tabla temporal de los empleados donde unifiques su nombre y apellido en una sola columna. */
DROP TEMPORARY TABLE IF EXISTS empleados_nombres;
CREATE TEMPORARY TABLE empleados_nombres AS SELECT CONCAT(nombre, ' ', apellido) AS nombre
FROM empleados;
SELECT * FROM empleados_nombres;

/* Crea una tabla temporal de la tabla clientes donde solo tengas la columna nombre. */
DROP TEMPORARY TABLE IF EXISTS clientes_nombres;
CREATE TEMPORARY TABLE clientes_nombres AS SELECT (nombre) FROM clientes;
SELECT * FROM clientes_nombres;

/* Realiza la unión entre las tablas temporales de empleados y clientes usando TABLE. */
TABLE empleados_nombres UNION TABLE clientes_nombres;

/* Crea una tabla temporal escuela primaria que tenga las siguientes columnas: 
    id(int), nombre(varchar), apellido(varchar), edad(int) y grado(int). Y que tenga los siguientes valores: */

/* ID: 1, Nombre: Alejandro, Apellido: González, Edad: 11, Grado: 5 */
/* ID: 2, Nombre: Isabella, Apellido: López, Edad: 10, Grado: 4 */
/* ID: 3, Nombre: Lucas, Apellido: Martínez, Edad: 11, Grado: 5  */
/* ID: 4, Nombre: Sofía, Apellido: Rodríguez, Edad: 10, Grado: 4  */
/* ID: 5, Nombre: Mateo, Apellido: Pérez, Edad: 12, Grado: 6 */ 
/* ID: 6, Nombre: Valentina, Apellido: Fernández, Edad: 12, Grado: 6 */
/* ID: 7, Nombre: Diego, Apellido: Torres, Edad: 10, Grado: 4 */
/* ID: 8, Nombre: Martina, Apellido: Gómez, Edad: 11, Grado: 5 */
/* ID: 9, Nombre: Joaquín, Apellido: Hernández, Edad: 10, Grado: 4 */
/* ID: 10, Nombre: Valeria, Apellido: Díaz, Edad: 11, Grado: 5 */

DROP TEMPORARY TABLE IF EXISTS escuela_primaria;

CREATE TEMPORARY TABLE escuela_primaria (
    id INT PRIMARY KEY,
    nombre VARCHAR(255),
    apellido VARCHAR(255),
    edad INT,
    grado INT
);

INSERT INTO escuela_primaria (id, nombre, apellido, edad, grado) VALUES
    (1, 'Alejandro', 'González', 11, 5),
    (2, 'Isabella', 'López', 10, 4),
    (3, 'Lucas', 'Martínez', 11, 5),
    (4, 'Sofía', 'Rodríguez', 10, 4),
    (5, 'Mateo', 'Pérez', 12, 6),
    (6, 'Valentina', 'Fernández', 12, 6),
    (7, 'Diego', 'Torres', 10, 4),
    (8, 'Martina', 'Gómez', 11, 5),
    (9, 'Joaquín', 'Hernández', 10, 4),
    (10, 'Valeria', 'Díaz', 11, 5);

/*
            ####################################################
            # Ejercicios Complementarios con Tablas Temporales #
            ####################################################
*/

/* Agrega un cliente nuevo con el nombre “Ana Rodríguez” y con dirección en “San Martín 2515, Mar del Plata”. 
    Luego realiza la intersección entre la tabla temporal de empleados y clientes. */

INSERT INTO clientes (nombre, direccion) 
VALUES ('Ana Rodríguez', 'San Martín 2515, Mar del Plata');

/* 💡 Debes volver a crear la tabla temporal de clientes para actualizar esa tabla. */
DROP TEMPORARY TABLE IF EXISTS clientes_nombres;
CREATE TEMPORARY TABLE clientes_nombres AS SELECT (nombre) FROM clientes;
SELECT * FROM clientes_nombres;

/* Realiza la excepción entre la tabla temporal de clientes y la de empleados. */
TABLE clientes_nombres EXCEPT TABLE empleados_nombres;

/* Crea una tabla temporal escuela secundaria que tenga las siguientes columnas: 
    id(int), nombre(varchar), apellido(varchar), edad(int) y grado(int). Y que tenga los siguientes valores: */

/* ID: 1, Nombre: Eduardo, Apellido: Sánchez, Edad: 16, Grado: 10 */
/* ID: 2, Nombre: Camila, Apellido: Martín, Edad: 17, Grado: 11 */
/* ID: 3, Nombre: Manuel, Apellido: Gutiérrez, Edad: 15, Grado: 9 */
/* ID: 4, Nombre: Laura, Apellido: García, Edad: 16, Grado: 10 */
/* ID: 11, Nombre: Pablo, Apellido: Ortega, Edad: 17, Grado: 11 */
/* ID: 12, Nombre: Carmen, Apellido: Ramírez, Edad: 15, Grado: 9 */
/* ID: 13, Nombre: Carlos, Apellido: Molina, Edad: 16, Grado: 10 */
/* ID: 14, Nombre: Ana, Apellido: Ruiz, Edad: 17, Grado: 11 */
/* ID: 15, Nombre: Luis, Apellido: Fernández, Edad: 15, Grado: 9 */
/* ID: 16, Nombre: María, Apellido: López, Edad: 16, Grado: 10 */

DROP TEMPORARY TABLE IF EXISTS escuela_secundaria;

CREATE TEMPORARY TABLE escuela_secundaria (
    id INT PRIMARY KEY,
    nombre VARCHAR(255),
    apellido VARCHAR(255),
    edad INT,
    grado INT
);

INSERT INTO escuela_secundaria (id, nombre, apellido, edad, grado) VALUES
    (1, 'Eduardo', 'Sánchez', 16, 10),
    (2, 'Camila', 'Martín', 17, 11),
    (3, 'Manuel', 'Gutiérrez', 15, 9),
    (4, 'Laura', 'García', 16, 10),
    (11, 'Pablo', 'Ortega', 17, 11),
    (12, 'Carmen', 'Ramírez', 15, 9),
    (13, 'Carlos', 'Molina', 16, 10),
    (14, 'Ana', 'Ruiz', 17, 11),
    (15, 'Luis', 'Fernández', 15, 9),
    (16, 'María', 'López', 16, 10);


/* Realiza la intersección de la escuela primaria y escuela secundaria con el 
nombre y apellido de los alumnos para saber quienes fueron a ambas escuelas. */
SELECT nombre, apellido FROM escuela_primaria
INTERSECT
SELECT nombre, apellido FROM escuela_secundaria;

/* Realiza la excepción de la escuela primaria con la secundaria para saber quienes 
no siguieron cursando en dicha escuela secundaria. */
SELECT nombre, apellido FROM escuela_primaria
EXCEPT
SELECT nombre, apellido FROM escuela_secundaria;

/* Realiza la excepción de la escuela secundaria con la primaria para saber quienes 
no siguieron cursando en dicha escuela secundaria. */
SELECT nombre, apellido FROM escuela_secundaria
EXCEPT
SELECT nombre, apellido FROM escuela_primaria;

/* Realiza la unión de la escuela primaria y secundaria con la columna grado para 
saber cuáles son los grados que abarcan ambas escuelas, y ordénalos de forma descendente. */
SELECT grado FROM escuela_primaria
UNION
SELECT grado FROM escuela_secundaria
ORDER BY grado DESC;

/*
            ######################################
            # Ejercicios  Subconsultas All y Any #
            ######################################
*/

/* Encuentra los nombres de los clientes que han realizado compras de productos 
    con un precio superior a la media de precios de todos los productos. */

SELECT nombre
FROM clientes AS c
WHERE c.id = ANY (
    SELECT DISTINCT v.cliente_id
    FROM ventas AS v
    WHERE producto_id = ANY (
        SELECT p.id
        FROM productos AS p
        WHERE p.precio > (
            SELECT AVG(precio) 
            FROM productos)
    )
);

/* Encuentra los empleados cuyo salario sea mayor que al menos uno de los 
    salarios de los empleados del departamento de "Ventas". */

SELECT CONCAT(e.nombre, ' ', e.apellido) AS 'Empleado'
FROM empleados AS e
WHERE e.salario > ANY (
    SELECT salario
    FROM empleados as e2 -- IMPORTANTE aclarar que e != e2! (sino solo va a contar los de ventas)
    WHERE e2.departamento_id = (
        SELECT id 
        FROM departamentos AS d 
        WHERE d.nombre = 'Ventas')
);

/* Encuentra los productos cuyos precios sean mayores que todos los precios 
    de los productos con la palabra "Móvil" en su nombre. */

SELECT p.nombre
FROM productos AS p
WHERE p.precio > ALL (
    SELECT p2.precio
    FROM productos AS p2 
    WHERE p2.nombre LIKE '%Móvil%'
);


/* Muestra la información de los clientes que realizaron la compra con el 
    monto total más alto, incluyendo su nombre, dirección y el monto total de compra. */

SELECT c.nombre AS "Cliente", c.direccion AS "Dirección", v.monto_total AS "Monto Total"
FROM clientes c
JOIN ventas v ON c.id = v.cliente_id
WHERE v.monto_total = ALL (
    SELECT MAX(monto_total)
    FROM ventas
);

SELECT c.nombre AS "Cliente", c.direccion AS "Dirección", v.monto_total AS "Monto Total"
FROM clientes c
JOIN ventas v ON c.id = v.cliente_id
WHERE v.monto_total = ANY (
    SELECT MAX(monto_total)
    FROM ventas
);

-- ¿Solucion del apunte?
SELECT c.nombre "Cliente", c.direccion "Dirección", MAX(v.monto_total) "Monto Total"
FROM clientes c 
INNER JOIN ventas v 
ON c.id = v.cliente_id
GROUP BY c.nombre, c.direccion
ORDER BY "Monto Total" DESC
LIMIT 1;

/* Para cada departamento, encuentra el empleado con el salario más alto. 
    Muestra el nombre del departamento junto con el nombre del empleado y su salario */

SELECT d.nombre AS "Departamento", CONCAT(e.nombre, ' ', e.apellido) AS "Empleado", e.salario AS "Salario"
FROM departamentos AS d
INNER JOIN empleados AS e ON d.id = e.departamento_id
WHERE e.salario = ANY (
    SELECT MAX(e2.salario)
    FROM empleados e2
    WHERE e2.departamento_id = e.departamento_id
    GROUP BY e2.departamento_id
);

/*
            ######################################
            # Ejercicios  Subconsultas All y Any #
            ######################################
*/

/* Encuentra los empleados que ganan más que el salario promedio de los empleados del 
    departamento de "Contabilidad". */

SELECT CONCAT(e.nombre, ' ', e.apellido) AS 'Empleado', e.salario, d.nombre AS 'Departamento'
FROM empleados AS e
INNER JOIN departamentos AS d ON e.departamento_id = d.id
WHERE e.salario > ALL(
    SELECT e2.salario
    FROM empleados AS e2
    INNER JOIN departamentos AS d2 ON e2.departamento_id = d2.id
    WHERE d2.nombre = 'Contabilidad'
);

/* Encuentra los productos que tienen un precio superior al precio de al menos uno de 
    los productos vendidos al cliente con nombre "Juan Pérez". */

SELECT p.nombre, p.precio
FROM productos AS p
WHERE p.precio > ANY (
    SELECT v.precio_unitario
    FROM ventas AS v
    INNER JOIN clientes c ON v.cliente_id = c.id
    WHERE c.nombre = 'Juan Pérez'
);

/* Encuentra los departamentos en los que al menos hay un empleado menor de 30 años. */

SELECT d.nombre
FROM departamentos AS d
WHERE 30 > ANY (
    SELECT e.edad
    FROM empleados AS e
    WHERE e.departamento_id = d.id
);

/* Muestra la información del empleado más joven, que esté entre los 3 empleados con más 
    cantidad de productos vendidos, incluyendo su nombre, apellido y edad. */

SELECT CONCAT(e.nombre, ' ', e.apellido) AS 'Empleado', e.edad
FROM empleados AS e
JOIN (
    SELECT e1.id, MIN(edad) AS min_edad
    FROM empleados AS e1
    JOIN ventas v ON e1.id = v.empleado_id
    GROUP BY id
    ORDER BY SUM(v.cantidad) DESC
    LIMIT 3
) AS TopEmpleados ON e.id = TopEmpleados.id
ORDER BY TopEmpleados.min_edad ASC
LIMIT 1;


/* Para cada cliente, encuentra el empleado que realizó la venta con el monto total más alto. 
    Muestra el nombre del cliente junto con el nombre del empleado y el monto total. */

SELECT DISTINCT c.nombre AS 'Cliente', CONCAT(e.nombre, ' ', e.apellido) AS 'Empleado', v.monto_total AS 'Monto Total'
FROM clientes c
JOIN ventas v ON c.id = v.cliente_id
JOIN empleados e ON v.empleado_id = e.id
WHERE v.monto_total = ANY (
    SELECT MAX(v2.monto_total)
    FROM ventas v2
    WHERE v2.cliente_id = c.id
    GROUP BY v2.cliente_id
);

/*
            ###############################
            # Ejercicios  Complementarios #
            ###############################
*/

/* Encuentra los clientes que no han realizado ninguna compra. 
    Muestra el nombre y la dirección de estos clientes. */

/* Muestra el nombre de los productos que se han vendido más veces que cualquier 
    producto con un precio superior a 500. */

/* Encuentra los empleados cuya edad sea menor que la edad de al menos un empleado 
    del departamento de "Recursos Humanos". */

/* Encuentra los productos cuyos precios sean menores o iguales a todos los precios de 
    los productos con la palabra "Cámara" en su nombre. */

/* Muestra el nombre y el salario de los empleados con salarios superiores al promedio 
    de salarios de todos los empleados. */

/* Encuentra el nombre y el salario de los empleados con salarios inferiores al promedio 
    de salarios de todos los empleados del departamento de "Ventas". */

/* Encuentra los clientes que han realizado compras de productos con un precio_unitario 
    inferior al precio promedio de todos los productos. */

/* Encuentra los empleados que tienen un salario igual al salario de al menos un empleado del 
    departamento de "Recursos Humanos". */

/* Encuentra los productos cuyo precio es mayor o igual a todos los precios de los productos 
    con la palabra "Refrigeradora" en su nombre. */

/* Muestra el nombre, apellido y salario del empleado con el salario más alto que esté por 
    debajo del promedio salarial de los empleados. */